/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Devlens Admin API 문서
 * Devlens Admin API 문서
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  APIResponseFileMetadataDto,
  APIResponseSuccessCode,
  DeleteMember200,
  MyPageGetMember,
  PatchMemberRequest,
  PatchMemberResponse,
  UploadProfileImageBody
} from '../../models'
import { mainAxios } from '../../../../../axiosClient';



export const getProfileImage = (
    memberId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseFileMetadataDto>(
      {url: `/api/members/${memberId}/profile-image`, method: 'GET', signal
    },
      );
    }
  

export const getGetProfileImageQueryKey = (memberId: number,) => {
    return [`/api/members/${memberId}/profile-image`] as const;
    }

    
export const getGetProfileImageInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProfileImage>>>, TError = unknown>(memberId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileImageQueryKey(memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileImage>>> = ({ signal }) => getProfileImage(memberId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(memberId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProfileImageInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProfileImage>>>
export type GetProfileImageInfiniteQueryError = unknown


export function useGetProfileImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProfileImage>>>, TError = unknown>(
 memberId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfileImage>>,
          TError,
          Awaited<ReturnType<typeof getProfileImage>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProfileImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProfileImage>>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfileImage>>,
          TError,
          Awaited<ReturnType<typeof getProfileImage>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProfileImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProfileImage>>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProfileImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProfileImage>>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProfileImageInfiniteQueryOptions(memberId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProfileImageQueryOptions = <TData = Awaited<ReturnType<typeof getProfileImage>>, TError = unknown>(memberId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileImageQueryKey(memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileImage>>> = ({ signal }) => getProfileImage(memberId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(memberId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProfileImageQueryResult = NonNullable<Awaited<ReturnType<typeof getProfileImage>>>
export type GetProfileImageQueryError = unknown


export function useGetProfileImage<TData = Awaited<ReturnType<typeof getProfileImage>>, TError = unknown>(
 memberId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfileImage>>,
          TError,
          Awaited<ReturnType<typeof getProfileImage>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProfileImage<TData = Awaited<ReturnType<typeof getProfileImage>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfileImage>>,
          TError,
          Awaited<ReturnType<typeof getProfileImage>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProfileImage<TData = Awaited<ReturnType<typeof getProfileImage>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProfileImage<TData = Awaited<ReturnType<typeof getProfileImage>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileImage>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProfileImageQueryOptions(memberId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const uploadProfileImage = (
    memberId: number,
    uploadProfileImageBody: UploadProfileImageBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append('file', uploadProfileImageBody.file)

      return mainAxios<APIResponseSuccessCode>(
      {url: `/api/members/${memberId}/profile-image`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getUploadProfileImageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadProfileImage>>, TError,{memberId: number;data: UploadProfileImageBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof uploadProfileImage>>, TError,{memberId: number;data: UploadProfileImageBody}, TContext> => {
    
const mutationKey = ['uploadProfileImage'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadProfileImage>>, {memberId: number;data: UploadProfileImageBody}> = (props) => {
          const {memberId,data} = props ?? {};

          return  uploadProfileImage(memberId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadProfileImageMutationResult = NonNullable<Awaited<ReturnType<typeof uploadProfileImage>>>
    export type UploadProfileImageMutationBody = UploadProfileImageBody
    export type UploadProfileImageMutationError = unknown

    export const useUploadProfileImage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadProfileImage>>, TError,{memberId: number;data: UploadProfileImageBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof uploadProfileImage>>,
        TError,
        {memberId: number;data: UploadProfileImageBody},
        TContext
      > => {

      const mutationOptions = getUploadProfileImageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteProfileImage = (
    memberId: number,
 ) => {
      
      
      return mainAxios<APIResponseSuccessCode>(
      {url: `/api/members/${memberId}/profile-image`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProfileImageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProfileImage>>, TError,{memberId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProfileImage>>, TError,{memberId: number}, TContext> => {
    
const mutationKey = ['deleteProfileImage'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProfileImage>>, {memberId: number}> = (props) => {
          const {memberId} = props ?? {};

          return  deleteProfileImage(memberId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProfileImageMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProfileImage>>>
    
    export type DeleteProfileImageMutationError = unknown

    export const useDeleteProfileImage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProfileImage>>, TError,{memberId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteProfileImage>>,
        TError,
        {memberId: number},
        TContext
      > => {

      const mutationOptions = getDeleteProfileImageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * 특정 회원의 로그인 ID를 기반으로 상세 정보를 조회합니다.
 * @summary 회원 상세 정보 조회
 */
export const memberDetail = (
    
 signal?: AbortSignal
) => {
      
      
      return mainAxios<MyPageGetMember>(
      {url: `/api/members`, method: 'GET', signal
    },
      );
    }
  

export const getMemberDetailQueryKey = () => {
    return [`/api/members`] as const;
    }

    
export const getMemberDetailInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof memberDetail>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMemberDetailQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof memberDetail>>> = ({ signal }) => memberDetail(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MemberDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof memberDetail>>>
export type MemberDetailInfiniteQueryError = unknown


export function useMemberDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof memberDetail>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof memberDetail>>,
          TError,
          Awaited<ReturnType<typeof memberDetail>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMemberDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof memberDetail>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof memberDetail>>,
          TError,
          Awaited<ReturnType<typeof memberDetail>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMemberDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof memberDetail>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 회원 상세 정보 조회
 */

export function useMemberDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof memberDetail>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMemberDetailInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMemberDetailQueryOptions = <TData = Awaited<ReturnType<typeof memberDetail>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMemberDetailQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof memberDetail>>> = ({ signal }) => memberDetail(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MemberDetailQueryResult = NonNullable<Awaited<ReturnType<typeof memberDetail>>>
export type MemberDetailQueryError = unknown


export function useMemberDetail<TData = Awaited<ReturnType<typeof memberDetail>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof memberDetail>>,
          TError,
          Awaited<ReturnType<typeof memberDetail>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMemberDetail<TData = Awaited<ReturnType<typeof memberDetail>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof memberDetail>>,
          TError,
          Awaited<ReturnType<typeof memberDetail>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMemberDetail<TData = Awaited<ReturnType<typeof memberDetail>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 회원 상세 정보 조회
 */

export function useMemberDetail<TData = Awaited<ReturnType<typeof memberDetail>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMemberDetailQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 회원의 로그인 ID를 기반으로 회원 상태를 변경하여 탈퇴 처리합니다.
 * @summary 회원 탈퇴
 */
export const deleteMember = (
    
 ) => {
      
      
      return mainAxios<DeleteMember200>(
      {url: `/api/members`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteMemberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMember>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteMember>>, TError,void, TContext> => {
    
const mutationKey = ['deleteMember'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMember>>, void> = () => {
          

          return  deleteMember()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMemberMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMember>>>
    
    export type DeleteMemberMutationError = unknown

    /**
 * @summary 회원 탈퇴
 */
export const useDeleteMember = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMember>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMember>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteMemberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * 회원의 로그인 ID를 기반으로 회원 정보를 수정합니다.
 * @summary 회원 정보 수정
 */
export const updateMember = (
    patchMemberRequest: PatchMemberRequest,
 ) => {
      
      
      return mainAxios<PatchMemberResponse>(
      {url: `/api/members`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchMemberRequest
    },
      );
    }
  


export const getUpdateMemberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMember>>, TError,{data: PatchMemberRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateMember>>, TError,{data: PatchMemberRequest}, TContext> => {
    
const mutationKey = ['updateMember'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMember>>, {data: PatchMemberRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateMember(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMemberMutationResult = NonNullable<Awaited<ReturnType<typeof updateMember>>>
    export type UpdateMemberMutationBody = PatchMemberRequest
    export type UpdateMemberMutationError = unknown

    /**
 * @summary 회원 정보 수정
 */
export const useUpdateMember = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMember>>, TError,{data: PatchMemberRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateMember>>,
        TError,
        {data: PatchMemberRequest},
        TContext
      > => {

      const mutationOptions = getUpdateMemberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    