/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Devlens Admin API Î¨∏ÏÑú
 * Devlens Admin API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  APIResponse,
  PatchCommentRequest,
  PostCommentRequest
} from '../../models'
import { mainAxios } from '../../../../../axiosClient';



/**
 * ÎåìÍ∏ÄÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary ÎåìÍ∏Ä ÏÉùÏÑ±
 */
export const createComment = (
    postId: number,
    postCommentRequest: PostCommentRequest,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/posts/${postId}/comments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCommentRequest, signal
    },
      );
    }
  


export const getCreateCommentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createComment>>, TError,{postId: number;data: PostCommentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createComment>>, TError,{postId: number;data: PostCommentRequest}, TContext> => {
    
const mutationKey = ['createComment'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createComment>>, {postId: number;data: PostCommentRequest}> = (props) => {
          const {postId,data} = props ?? {};

          return  createComment(postId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCommentMutationResult = NonNullable<Awaited<ReturnType<typeof createComment>>>
    export type CreateCommentMutationBody = PostCommentRequest
    export type CreateCommentMutationError = unknown

    /**
 * @summary ÎåìÍ∏Ä ÏÉùÏÑ±
 */
export const useCreateComment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createComment>>, TError,{postId: number;data: PostCommentRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createComment>>,
        TError,
        {postId: number;data: PostCommentRequest},
        TContext
      > => {

      const mutationOptions = getCreateCommentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÎåìÍ∏ÄÏùÑ ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary ÎåìÍ∏Ä ÏÇ≠Ï†ú
 */
export const deleteComment = (
    postId: number,
    commentId: number,
 ) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/posts/${postId}/comments/${commentId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteCommentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{postId: number;commentId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{postId: number;commentId: number}, TContext> => {
    
const mutationKey = ['deleteComment'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteComment>>, {postId: number;commentId: number}> = (props) => {
          const {postId,commentId} = props ?? {};

          return  deleteComment(postId,commentId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCommentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteComment>>>
    
    export type DeleteCommentMutationError = unknown

    /**
 * @summary ÎåìÍ∏Ä ÏÇ≠Ï†ú
 */
export const useDeleteComment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{postId: number;commentId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteComment>>,
        TError,
        {postId: number;commentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteCommentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÎåìÍ∏ÄÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary ÎåìÍ∏Ä ÏàòÏ†ï
 */
export const updateComment = (
    postId: number,
    commentId: number,
    patchCommentRequest: PatchCommentRequest,
 ) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/posts/${postId}/comments/${commentId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchCommentRequest
    },
      );
    }
  


export const getUpdateCommentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateComment>>, TError,{postId: number;commentId: number;data: PatchCommentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateComment>>, TError,{postId: number;commentId: number;data: PatchCommentRequest}, TContext> => {
    
const mutationKey = ['updateComment'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateComment>>, {postId: number;commentId: number;data: PatchCommentRequest}> = (props) => {
          const {postId,commentId,data} = props ?? {};

          return  updateComment(postId,commentId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCommentMutationResult = NonNullable<Awaited<ReturnType<typeof updateComment>>>
    export type UpdateCommentMutationBody = PatchCommentRequest
    export type UpdateCommentMutationError = unknown

    /**
 * @summary ÎåìÍ∏Ä ÏàòÏ†ï
 */
export const useUpdateComment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateComment>>, TError,{postId: number;commentId: number;data: PatchCommentRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateComment>>,
        TError,
        {postId: number;commentId: number;data: PatchCommentRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCommentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    