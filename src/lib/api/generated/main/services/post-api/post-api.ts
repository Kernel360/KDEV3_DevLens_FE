/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Devlens Admin API Î¨∏ÏÑú
 * Devlens Admin API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  APIResponse,
  APIResponseListFileMetadataResponse,
  APIResponseListLinkResponse,
  APIResponseSuccessCode,
  LinkInput,
  PostCreateRequest,
  PostListResponse,
  PostResponse,
  PostUpdateRequest,
  SelectPostsParams,
  UpdatePostFilesBody,
  UploadPostFilesBody
} from '../../models'
import { mainAxios } from '../../../../../axiosClient';



/**
 * Í≤åÏãúÍ∏ÄÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const selectPost = (
    postId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<PostResponse>(
      {url: `/api/posts/${postId}`, method: 'GET', signal
    },
      );
    }
  

export const getSelectPostQueryKey = (postId: number,) => {
    return [`/api/posts/${postId}`] as const;
    }

    
export const getSelectPostInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof selectPost>>>, TError = unknown>(postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectPostQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectPost>>> = ({ signal }) => selectPost(postId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectPostInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof selectPost>>>
export type SelectPostInfiniteQueryError = unknown


export function useSelectPostInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPost>>>, TError = unknown>(
 postId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPost>>,
          TError,
          Awaited<ReturnType<typeof selectPost>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPost>>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPost>>,
          TError,
          Awaited<ReturnType<typeof selectPost>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPost>>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useSelectPostInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPost>>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectPostInfiniteQueryOptions(postId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSelectPostQueryOptions = <TData = Awaited<ReturnType<typeof selectPost>>, TError = unknown>(postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectPostQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectPost>>> = ({ signal }) => selectPost(postId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectPostQueryResult = NonNullable<Awaited<ReturnType<typeof selectPost>>>
export type SelectPostQueryError = unknown


export function useSelectPost<TData = Awaited<ReturnType<typeof selectPost>>, TError = unknown>(
 postId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPost>>,
          TError,
          Awaited<ReturnType<typeof selectPost>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPost<TData = Awaited<ReturnType<typeof selectPost>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPost>>,
          TError,
          Awaited<ReturnType<typeof selectPost>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPost<TData = Awaited<ReturnType<typeof selectPost>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useSelectPost<TData = Awaited<ReturnType<typeof selectPost>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPost>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectPostQueryOptions(postId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Í∏∞Ï°¥ Í≤åÏãúÍ∏ÄÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary Í≤åÏãúÎ¨º ÏàòÏ†ï
 */
export const updatePost = (
    postId: number,
    postUpdateRequest: PostUpdateRequest,
 ) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/posts/${postId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: postUpdateRequest
    },
      );
    }
  


export const getUpdatePostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePost>>, TError,{postId: number;data: PostUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updatePost>>, TError,{postId: number;data: PostUpdateRequest}, TContext> => {
    
const mutationKey = ['updatePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePost>>, {postId: number;data: PostUpdateRequest}> = (props) => {
          const {postId,data} = props ?? {};

          return  updatePost(postId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePostMutationResult = NonNullable<Awaited<ReturnType<typeof updatePost>>>
    export type UpdatePostMutationBody = PostUpdateRequest
    export type UpdatePostMutationError = unknown

    /**
 * @summary Í≤åÏãúÎ¨º ÏàòÏ†ï
 */
export const useUpdatePost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePost>>, TError,{postId: number;data: PostUpdateRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updatePost>>,
        TError,
        {postId: number;data: PostUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdatePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Í∏∞Ï°¥ Í≤åÏãúÍ∏ÄÏùÑ ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú
 */
export const deletePost = (
    postId: number,
 ) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/posts/${postId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeletePostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePost>>, TError,{postId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deletePost>>, TError,{postId: number}, TContext> => {
    
const mutationKey = ['deletePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePost>>, {postId: number}> = (props) => {
          const {postId} = props ?? {};

          return  deletePost(postId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deletePost>>>
    
    export type DeletePostMutationError = unknown

    /**
 * @summary Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú
 */
export const useDeletePost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePost>>, TError,{postId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deletePost>>,
        TError,
        {postId: number},
        TContext
      > => {

      const mutationOptions = getDeletePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const selectPostFiles = (
    postId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseListFileMetadataResponse>(
      {url: `/api/posts/${postId}/files`, method: 'GET', signal
    },
      );
    }
  

export const getSelectPostFilesQueryKey = (postId: number,) => {
    return [`/api/posts/${postId}/files`] as const;
    }

    
export const getSelectPostFilesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof selectPostFiles>>>, TError = unknown>(postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectPostFilesQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectPostFiles>>> = ({ signal }) => selectPostFiles(postId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectPostFilesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof selectPostFiles>>>
export type SelectPostFilesInfiniteQueryError = unknown


export function useSelectPostFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPostFiles>>>, TError = unknown>(
 postId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPostFiles>>,
          TError,
          Awaited<ReturnType<typeof selectPostFiles>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPostFiles>>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPostFiles>>,
          TError,
          Awaited<ReturnType<typeof selectPostFiles>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPostFiles>>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSelectPostFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPostFiles>>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectPostFilesInfiniteQueryOptions(postId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSelectPostFilesQueryOptions = <TData = Awaited<ReturnType<typeof selectPostFiles>>, TError = unknown>(postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectPostFilesQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectPostFiles>>> = ({ signal }) => selectPostFiles(postId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectPostFilesQueryResult = NonNullable<Awaited<ReturnType<typeof selectPostFiles>>>
export type SelectPostFilesQueryError = unknown


export function useSelectPostFiles<TData = Awaited<ReturnType<typeof selectPostFiles>>, TError = unknown>(
 postId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPostFiles>>,
          TError,
          Awaited<ReturnType<typeof selectPostFiles>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostFiles<TData = Awaited<ReturnType<typeof selectPostFiles>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPostFiles>>,
          TError,
          Awaited<ReturnType<typeof selectPostFiles>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostFiles<TData = Awaited<ReturnType<typeof selectPostFiles>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSelectPostFiles<TData = Awaited<ReturnType<typeof selectPostFiles>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPostFiles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectPostFilesQueryOptions(postId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updatePostFiles = (
    postId: number,
    updatePostFilesBody: UpdatePostFilesBody,
 ) => {
      
      const formData = new FormData();
updatePostFilesBody.files.forEach(value => formData.append('files', value));

      return mainAxios<APIResponseSuccessCode>(
      {url: `/api/posts/${postId}/files`, method: 'PUT',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getUpdatePostFilesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePostFiles>>, TError,{postId: number;data: UpdatePostFilesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updatePostFiles>>, TError,{postId: number;data: UpdatePostFilesBody}, TContext> => {
    
const mutationKey = ['updatePostFiles'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePostFiles>>, {postId: number;data: UpdatePostFilesBody}> = (props) => {
          const {postId,data} = props ?? {};

          return  updatePostFiles(postId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePostFilesMutationResult = NonNullable<Awaited<ReturnType<typeof updatePostFiles>>>
    export type UpdatePostFilesMutationBody = UpdatePostFilesBody
    export type UpdatePostFilesMutationError = unknown

    export const useUpdatePostFiles = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePostFiles>>, TError,{postId: number;data: UpdatePostFilesBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updatePostFiles>>,
        TError,
        {postId: number;data: UpdatePostFilesBody},
        TContext
      > => {

      const mutationOptions = getUpdatePostFilesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const uploadPostFiles = (
    postId: number,
    uploadPostFilesBody: UploadPostFilesBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
uploadPostFilesBody.files.forEach(value => formData.append('files', value));

      return mainAxios<APIResponseSuccessCode>(
      {url: `/api/posts/${postId}/files`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getUploadPostFilesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadPostFiles>>, TError,{postId: number;data: UploadPostFilesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof uploadPostFiles>>, TError,{postId: number;data: UploadPostFilesBody}, TContext> => {
    
const mutationKey = ['uploadPostFiles'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadPostFiles>>, {postId: number;data: UploadPostFilesBody}> = (props) => {
          const {postId,data} = props ?? {};

          return  uploadPostFiles(postId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadPostFilesMutationResult = NonNullable<Awaited<ReturnType<typeof uploadPostFiles>>>
    export type UploadPostFilesMutationBody = UploadPostFilesBody
    export type UploadPostFilesMutationError = unknown

    export const useUploadPostFiles = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadPostFiles>>, TError,{postId: number;data: UploadPostFilesBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof uploadPostFiles>>,
        TError,
        {postId: number;data: UploadPostFilesBody},
        TContext
      > => {

      const mutationOptions = getUploadPostFilesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏ÄÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const createPost = (
    postCreateRequest: PostCreateRequest,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/posts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCreateRequest, signal
    },
      );
    }
  


export const getCreatePostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPost>>, TError,{data: PostCreateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createPost>>, TError,{data: PostCreateRequest}, TContext> => {
    
const mutationKey = ['createPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPost>>, {data: PostCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  createPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePostMutationResult = NonNullable<Awaited<ReturnType<typeof createPost>>>
    export type CreatePostMutationBody = PostCreateRequest
    export type CreatePostMutationError = unknown

    /**
 * @summary Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const useCreatePost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPost>>, TError,{data: PostCreateRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createPost>>,
        TError,
        {data: PostCreateRequest},
        TContext
      > => {

      const mutationOptions = getCreatePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const selectPostLinks = (
    postId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseListLinkResponse>(
      {url: `/api/posts/${postId}/links`, method: 'GET', signal
    },
      );
    }
  

export const getSelectPostLinksQueryKey = (postId: number,) => {
    return [`/api/posts/${postId}/links`] as const;
    }

    
export const getSelectPostLinksInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof selectPostLinks>>>, TError = unknown>(postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectPostLinksQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectPostLinks>>> = ({ signal }) => selectPostLinks(postId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectPostLinksInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof selectPostLinks>>>
export type SelectPostLinksInfiniteQueryError = unknown


export function useSelectPostLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPostLinks>>>, TError = unknown>(
 postId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPostLinks>>,
          TError,
          Awaited<ReturnType<typeof selectPostLinks>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPostLinks>>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPostLinks>>,
          TError,
          Awaited<ReturnType<typeof selectPostLinks>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPostLinks>>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSelectPostLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPostLinks>>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectPostLinksInfiniteQueryOptions(postId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSelectPostLinksQueryOptions = <TData = Awaited<ReturnType<typeof selectPostLinks>>, TError = unknown>(postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectPostLinksQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectPostLinks>>> = ({ signal }) => selectPostLinks(postId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectPostLinksQueryResult = NonNullable<Awaited<ReturnType<typeof selectPostLinks>>>
export type SelectPostLinksQueryError = unknown


export function useSelectPostLinks<TData = Awaited<ReturnType<typeof selectPostLinks>>, TError = unknown>(
 postId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPostLinks>>,
          TError,
          Awaited<ReturnType<typeof selectPostLinks>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostLinks<TData = Awaited<ReturnType<typeof selectPostLinks>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPostLinks>>,
          TError,
          Awaited<ReturnType<typeof selectPostLinks>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostLinks<TData = Awaited<ReturnType<typeof selectPostLinks>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSelectPostLinks<TData = Awaited<ReturnType<typeof selectPostLinks>>, TError = unknown>(
 postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPostLinks>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectPostLinksQueryOptions(postId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const uploadLinks = (
    postId: number,
    linkInput: LinkInput[],
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseSuccessCode>(
      {url: `/api/posts/${postId}/links`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: linkInput, signal
    },
      );
    }
  


export const getUploadLinksMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadLinks>>, TError,{postId: number;data: LinkInput[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof uploadLinks>>, TError,{postId: number;data: LinkInput[]}, TContext> => {
    
const mutationKey = ['uploadLinks'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadLinks>>, {postId: number;data: LinkInput[]}> = (props) => {
          const {postId,data} = props ?? {};

          return  uploadLinks(postId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadLinksMutationResult = NonNullable<Awaited<ReturnType<typeof uploadLinks>>>
    export type UploadLinksMutationBody = LinkInput[]
    export type UploadLinksMutationError = unknown

    export const useUploadLinks = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadLinks>>, TError,{postId: number;data: LinkInput[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof uploadLinks>>,
        TError,
        {postId: number;data: LinkInput[]},
        TContext
      > => {

      const mutationOptions = getUploadLinksMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Í≤åÏãúÍ∏Ä Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå (Ï†ÑÏ≤¥ Î™©Î°ù Ï°∞Ìöå Ìè¨Ìï®)
 */
export const selectPosts = (
    projectId: number,
    params: SelectPostsParams,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<PostListResponse>(
      {url: `/api/posts/project/${projectId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSelectPostsQueryKey = (projectId: number,
    params: SelectPostsParams,) => {
    return [`/api/posts/project/${projectId}`, ...(params ? [params]: [])] as const;
    }

    
export const getSelectPostsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof selectPosts>>>, TError = unknown>(projectId: number,
    params: SelectPostsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectPostsQueryKey(projectId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectPosts>>> = ({ signal }) => selectPosts(projectId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectPostsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof selectPosts>>>
export type SelectPostsInfiniteQueryError = unknown


export function useSelectPostsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPosts>>>, TError = unknown>(
 projectId: number,
    params: SelectPostsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPosts>>,
          TError,
          Awaited<ReturnType<typeof selectPosts>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPosts>>>, TError = unknown>(
 projectId: number,
    params: SelectPostsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPosts>>,
          TError,
          Awaited<ReturnType<typeof selectPosts>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPostsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPosts>>>, TError = unknown>(
 projectId: number,
    params: SelectPostsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå (Ï†ÑÏ≤¥ Î™©Î°ù Ï°∞Ìöå Ìè¨Ìï®)
 */

export function useSelectPostsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectPosts>>>, TError = unknown>(
 projectId: number,
    params: SelectPostsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectPostsInfiniteQueryOptions(projectId,params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSelectPostsQueryOptions = <TData = Awaited<ReturnType<typeof selectPosts>>, TError = unknown>(projectId: number,
    params: SelectPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectPostsQueryKey(projectId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectPosts>>> = ({ signal }) => selectPosts(projectId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectPostsQueryResult = NonNullable<Awaited<ReturnType<typeof selectPosts>>>
export type SelectPostsQueryError = unknown


export function useSelectPosts<TData = Awaited<ReturnType<typeof selectPosts>>, TError = unknown>(
 projectId: number,
    params: SelectPostsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPosts>>,
          TError,
          Awaited<ReturnType<typeof selectPosts>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPosts<TData = Awaited<ReturnType<typeof selectPosts>>, TError = unknown>(
 projectId: number,
    params: SelectPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectPosts>>,
          TError,
          Awaited<ReturnType<typeof selectPosts>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectPosts<TData = Awaited<ReturnType<typeof selectPosts>>, TError = unknown>(
 projectId: number,
    params: SelectPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå (Ï†ÑÏ≤¥ Î™©Î°ù Ï°∞Ìöå Ìè¨Ìï®)
 */

export function useSelectPosts<TData = Awaited<ReturnType<typeof selectPosts>>, TError = unknown>(
 projectId: number,
    params: SelectPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectPosts>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectPostsQueryOptions(projectId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteLink = (
    postId: number,
    linkId: number,
 ) => {
      
      
      return mainAxios<APIResponseSuccessCode>(
      {url: `/api/posts/${postId}/links/${linkId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteLinkMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLink>>, TError,{postId: number;linkId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteLink>>, TError,{postId: number;linkId: number}, TContext> => {
    
const mutationKey = ['deleteLink'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLink>>, {postId: number;linkId: number}> = (props) => {
          const {postId,linkId} = props ?? {};

          return  deleteLink(postId,linkId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLinkMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLink>>>
    
    export type DeleteLinkMutationError = unknown

    export const useDeleteLink = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLink>>, TError,{postId: number;linkId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLink>>,
        TError,
        {postId: number;linkId: number},
        TContext
      > => {

      const mutationOptions = getDeleteLinkMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deletePostFiles = (
    postId: number,
    fileId: number,
 ) => {
      
      
      return mainAxios<APIResponseSuccessCode>(
      {url: `/api/posts/${postId}/files/${fileId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeletePostFilesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePostFiles>>, TError,{postId: number;fileId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deletePostFiles>>, TError,{postId: number;fileId: number}, TContext> => {
    
const mutationKey = ['deletePostFiles'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePostFiles>>, {postId: number;fileId: number}> = (props) => {
          const {postId,fileId} = props ?? {};

          return  deletePostFiles(postId,fileId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePostFilesMutationResult = NonNullable<Awaited<ReturnType<typeof deletePostFiles>>>
    
    export type DeletePostFilesMutationError = unknown

    export const useDeletePostFiles = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePostFiles>>, TError,{postId: number;fileId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deletePostFiles>>,
        TError,
        {postId: number;fileId: number},
        TContext
      > => {

      const mutationOptions = getDeletePostFilesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    