/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetProjectDetailResponse
} from '../../models'
import { mainAxios } from '../../../../../axiosClient';



/**
 * ÌäπÏ†ï ÌîÑÎ°úÏ†ùÌä∏Ïùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Î∞òÌôòÌï©ÎãàÎã§.
 * @summary ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getProjectDetail = (
    projectId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<GetProjectDetailResponse>(
      {url: `/api/projects/detail/${projectId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectDetailQueryKey = (projectId: number,) => {
    return [`/api/projects/detail/${projectId}`] as const;
    }

    
export const getGetProjectDetailInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectDetail>>>, TError = unknown>(projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectDetailQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectDetail>>> = ({ signal }) => getProjectDetail(projectId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectDetail>>>
export type GetProjectDetailInfiniteQueryError = unknown


export function useGetProjectDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectDetail>>>, TError = unknown>(
 projectId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectDetail>>,
          TError,
          Awaited<ReturnType<typeof getProjectDetail>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectDetail>>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectDetail>>,
          TError,
          Awaited<ReturnType<typeof getProjectDetail>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectDetail>>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetProjectDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectDetail>>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectDetailInfiniteQueryOptions(projectId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectDetailQueryOptions = <TData = Awaited<ReturnType<typeof getProjectDetail>>, TError = unknown>(projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectDetailQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectDetail>>> = ({ signal }) => getProjectDetail(projectId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectDetail>>>
export type GetProjectDetailQueryError = unknown


export function useGetProjectDetail<TData = Awaited<ReturnType<typeof getProjectDetail>>, TError = unknown>(
 projectId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectDetail>>,
          TError,
          Awaited<ReturnType<typeof getProjectDetail>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectDetail<TData = Awaited<ReturnType<typeof getProjectDetail>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectDetail>>,
          TError,
          Awaited<ReturnType<typeof getProjectDetail>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectDetail<TData = Awaited<ReturnType<typeof getProjectDetail>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetProjectDetail<TData = Awaited<ReturnType<typeof getProjectDetail>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectDetailQueryOptions(projectId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



