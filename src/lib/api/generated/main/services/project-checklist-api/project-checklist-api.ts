/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Devlens Admin API Î¨∏ÏÑú
 * Devlens Admin API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  APIResponseGetProjectChecklistApplicationResponse,
  APIResponseListFileMetadataDto,
  APIResponseListLinkResponse,
  APIResponseSuccessCode,
  DeleteProjectChecklistResponse,
  GetApplicationResultResponse,
  GetStepChecklistResponse,
  PostProjectChecklistAcceptResponse,
  PostProjectChecklistApplication1Body,
  PostProjectChecklistApplicationRequest,
  PostProjectChecklistApplicationResponse,
  PostProjectChecklistRejectFileParams,
  PostProjectChecklistRejectRequest,
  PostProjectChecklistRejectResponse,
  PostProjectChecklistRequest,
  PostProjectChecklistResponse,
  PutProjectChecklistRequest,
  PutProjectChecklistResponse
} from '../../models'
import { mainAxios } from '../../../../../axiosClient';



/**
 * Í∏∞Ï°¥ Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Î•º ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÏàòÏ†ï
 */
export const putProjectChecklist = (
    checklistId: number,
    putProjectChecklistRequest: PutProjectChecklistRequest,
 ) => {
      
      
      return mainAxios<PutProjectChecklistResponse>(
      {url: `/api/projects/checklists/${checklistId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putProjectChecklistRequest
    },
      );
    }
  


export const getPutProjectChecklistMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProjectChecklist>>, TError,{checklistId: number;data: PutProjectChecklistRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putProjectChecklist>>, TError,{checklistId: number;data: PutProjectChecklistRequest}, TContext> => {
    
const mutationKey = ['putProjectChecklist'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProjectChecklist>>, {checklistId: number;data: PutProjectChecklistRequest}> = (props) => {
          const {checklistId,data} = props ?? {};

          return  putProjectChecklist(checklistId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProjectChecklistMutationResult = NonNullable<Awaited<ReturnType<typeof putProjectChecklist>>>
    export type PutProjectChecklistMutationBody = PutProjectChecklistRequest
    export type PutProjectChecklistMutationError = unknown

    /**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÏàòÏ†ï
 */
export const usePutProjectChecklist = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProjectChecklist>>, TError,{checklistId: number;data: PutProjectChecklistRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putProjectChecklist>>,
        TError,
        {checklistId: number;data: PutProjectChecklistRequest},
        TContext
      > => {

      const mutationOptions = getPutProjectChecklistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌäπÏ†ï Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÏÇ≠Ï†ú
 */
export const deleteProjectChecklist = (
    checklistId: number,
 ) => {
      
      
      return mainAxios<DeleteProjectChecklistResponse>(
      {url: `/api/projects/checklists/${checklistId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProjectChecklistMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProjectChecklist>>, TError,{checklistId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProjectChecklist>>, TError,{checklistId: number}, TContext> => {
    
const mutationKey = ['deleteProjectChecklist'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProjectChecklist>>, {checklistId: number}> = (props) => {
          const {checklistId} = props ?? {};

          return  deleteProjectChecklist(checklistId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProjectChecklistMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProjectChecklist>>>
    
    export type DeleteProjectChecklistMutationError = unknown

    /**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÏÇ≠Ï†ú
 */
export const useDeleteProjectChecklist = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProjectChecklist>>, TError,{checklistId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteProjectChecklist>>,
        TError,
        {checklistId: number},
        TContext
      > => {

      const mutationOptions = getDeleteProjectChecklistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌäπÏ†ï Îã®Í≥ÑÏùò Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const getProjectChecklist = (
    stepId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<GetStepChecklistResponse>(
      {url: `/api/projects/steps/${stepId}/checklists`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectChecklistQueryKey = (stepId: number,) => {
    return [`/api/projects/steps/${stepId}/checklists`] as const;
    }

    
export const getGetProjectChecklistInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklist>>>, TError = unknown>(stepId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistQueryKey(stepId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklist>>> = ({ signal }) => getProjectChecklist(stepId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(stepId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklist>>>
export type GetProjectChecklistInfiniteQueryError = unknown


export function useGetProjectChecklistInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklist>>>, TError = unknown>(
 stepId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklist>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklist>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklist>>>, TError = unknown>(
 stepId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklist>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklist>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklist>>>, TError = unknown>(
 stepId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */

export function useGetProjectChecklistInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklist>>>, TError = unknown>(
 stepId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistInfiniteQueryOptions(stepId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectChecklistQueryOptions = <TData = Awaited<ReturnType<typeof getProjectChecklist>>, TError = unknown>(stepId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistQueryKey(stepId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklist>>> = ({ signal }) => getProjectChecklist(stepId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(stepId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklist>>>
export type GetProjectChecklistQueryError = unknown


export function useGetProjectChecklist<TData = Awaited<ReturnType<typeof getProjectChecklist>>, TError = unknown>(
 stepId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklist>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklist>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklist<TData = Awaited<ReturnType<typeof getProjectChecklist>>, TError = unknown>(
 stepId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklist>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklist>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklist<TData = Awaited<ReturnType<typeof getProjectChecklist>>, TError = unknown>(
 stepId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */

export function useGetProjectChecklist<TData = Awaited<ReturnType<typeof getProjectChecklist>>, TError = unknown>(
 stepId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklist>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistQueryOptions(stepId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏÉàÎ°úÏö¥ Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÏÉùÏÑ±
 */
export const postProjectChecklist = (
    stepId: number,
    postProjectChecklistRequest: PostProjectChecklistRequest,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<PostProjectChecklistResponse>(
      {url: `/api/projects/steps/${stepId}/checklists`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postProjectChecklistRequest, signal
    },
      );
    }
  


export const getPostProjectChecklistMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklist>>, TError,{stepId: number;data: PostProjectChecklistRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklist>>, TError,{stepId: number;data: PostProjectChecklistRequest}, TContext> => {
    
const mutationKey = ['postProjectChecklist'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProjectChecklist>>, {stepId: number;data: PostProjectChecklistRequest}> = (props) => {
          const {stepId,data} = props ?? {};

          return  postProjectChecklist(stepId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProjectChecklistMutationResult = NonNullable<Awaited<ReturnType<typeof postProjectChecklist>>>
    export type PostProjectChecklistMutationBody = PostProjectChecklistRequest
    export type PostProjectChecklistMutationError = unknown

    /**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÏÉùÏÑ±
 */
export const usePostProjectChecklist = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklist>>, TError,{stepId: number;data: PostProjectChecklistRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postProjectChecklist>>,
        TError,
        {stepId: number;data: PostProjectChecklistRequest},
        TContext
      > => {

      const mutationOptions = getPostProjectChecklistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getProjectChecklistRejectFiles = (
    applicationId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseListFileMetadataDto>(
      {url: `/api/projects/reject/${applicationId}/files`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectChecklistRejectFilesQueryKey = (applicationId: number,) => {
    return [`/api/projects/reject/${applicationId}/files`] as const;
    }

    
export const getGetProjectChecklistRejectFilesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistRejectFilesQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>> = ({ signal }) => getProjectChecklistRejectFiles(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistRejectFilesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>>
export type GetProjectChecklistRejectFilesInfiniteQueryError = unknown


export function useGetProjectChecklistRejectFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistRejectFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistRejectFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectChecklistRejectFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistRejectFilesInfiniteQueryOptions(applicationId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectChecklistRejectFilesQueryOptions = <TData = Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistRejectFilesQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>> = ({ signal }) => getProjectChecklistRejectFiles(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistRejectFilesQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>>
export type GetProjectChecklistRejectFilesQueryError = unknown


export function useGetProjectChecklistRejectFiles<TData = Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistRejectFiles<TData = Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistRejectFiles<TData = Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectChecklistRejectFiles<TData = Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectFiles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistRejectFilesQueryOptions(applicationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postProjectChecklistRejectFile = (
    applicationId: number,
    params: PostProjectChecklistRejectFileParams,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseSuccessCode>(
      {url: `/api/projects/reject/${applicationId}/files`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getPostProjectChecklistRejectFileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistRejectFile>>, TError,{applicationId: number;params: PostProjectChecklistRejectFileParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistRejectFile>>, TError,{applicationId: number;params: PostProjectChecklistRejectFileParams}, TContext> => {
    
const mutationKey = ['postProjectChecklistRejectFile'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProjectChecklistRejectFile>>, {applicationId: number;params: PostProjectChecklistRejectFileParams}> = (props) => {
          const {applicationId,params} = props ?? {};

          return  postProjectChecklistRejectFile(applicationId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProjectChecklistRejectFileMutationResult = NonNullable<Awaited<ReturnType<typeof postProjectChecklistRejectFile>>>
    
    export type PostProjectChecklistRejectFileMutationError = unknown

    export const usePostProjectChecklistRejectFile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistRejectFile>>, TError,{applicationId: number;params: PostProjectChecklistRejectFileParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postProjectChecklistRejectFile>>,
        TError,
        {applicationId: number;params: PostProjectChecklistRejectFileParams},
        TContext
      > => {

      const mutationOptions = getPostProjectChecklistRejectFileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Ïóê ÏÉàÎ°úÏö¥ Ïã†Ï≤≠ÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ïã†Ï≤≠ ÏÉùÏÑ±
 */
export const postProjectChecklistApplication = (
    checklistId: number,
    postProjectChecklistApplicationRequest: PostProjectChecklistApplicationRequest,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<PostProjectChecklistApplicationResponse>(
      {url: `/api/projects/checklists/${checklistId}/applications`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postProjectChecklistApplicationRequest, signal
    },
      );
    }
  


export const getPostProjectChecklistApplicationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistApplication>>, TError,{checklistId: number;data: PostProjectChecklistApplicationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistApplication>>, TError,{checklistId: number;data: PostProjectChecklistApplicationRequest}, TContext> => {
    
const mutationKey = ['postProjectChecklistApplication'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProjectChecklistApplication>>, {checklistId: number;data: PostProjectChecklistApplicationRequest}> = (props) => {
          const {checklistId,data} = props ?? {};

          return  postProjectChecklistApplication(checklistId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProjectChecklistApplicationMutationResult = NonNullable<Awaited<ReturnType<typeof postProjectChecklistApplication>>>
    export type PostProjectChecklistApplicationMutationBody = PostProjectChecklistApplicationRequest
    export type PostProjectChecklistApplicationMutationError = unknown

    /**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ïã†Ï≤≠ ÏÉùÏÑ±
 */
export const usePostProjectChecklistApplication = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistApplication>>, TError,{checklistId: number;data: PostProjectChecklistApplicationRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postProjectChecklistApplication>>,
        TError,
        {checklistId: number;data: PostProjectChecklistApplicationRequest},
        TContext
      > => {

      const mutationOptions = getPostProjectChecklistApplicationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postProjectChecklistApplication1 = (
    checklistId: number,
    applicationId: number,
    postProjectChecklistApplication1Body: PostProjectChecklistApplication1Body,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
postProjectChecklistApplication1Body.files.forEach(value => formData.append('files', value));

      return mainAxios<APIResponseSuccessCode>(
      {url: `/api/projects/checklists/${checklistId}/applications/${applicationId}/files`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostProjectChecklistApplication1MutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistApplication1>>, TError,{checklistId: number;applicationId: number;data: PostProjectChecklistApplication1Body}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistApplication1>>, TError,{checklistId: number;applicationId: number;data: PostProjectChecklistApplication1Body}, TContext> => {
    
const mutationKey = ['postProjectChecklistApplication1'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProjectChecklistApplication1>>, {checklistId: number;applicationId: number;data: PostProjectChecklistApplication1Body}> = (props) => {
          const {checklistId,applicationId,data} = props ?? {};

          return  postProjectChecklistApplication1(checklistId,applicationId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProjectChecklistApplication1MutationResult = NonNullable<Awaited<ReturnType<typeof postProjectChecklistApplication1>>>
    export type PostProjectChecklistApplication1MutationBody = PostProjectChecklistApplication1Body
    export type PostProjectChecklistApplication1MutationError = unknown

    export const usePostProjectChecklistApplication1 = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistApplication1>>, TError,{checklistId: number;applicationId: number;data: PostProjectChecklistApplication1Body}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postProjectChecklistApplication1>>,
        TError,
        {checklistId: number;applicationId: number;data: PostProjectChecklistApplication1Body},
        TContext
      > => {

      const mutationOptions = getPostProjectChecklistApplication1MutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌäπÏ†ï Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ïã†Ï≤≠ÏùÑ Í±∞Ï†àÌï©ÎãàÎã§.
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ïã†Ï≤≠ Í±∞Ï†à
 */
export const postProjectChecklistReject = (
    applicationId: number,
    postProjectChecklistRejectRequest: PostProjectChecklistRejectRequest,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<PostProjectChecklistRejectResponse>(
      {url: `/api/projects/applications/${applicationId}/reject`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postProjectChecklistRejectRequest, signal
    },
      );
    }
  


export const getPostProjectChecklistRejectMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistReject>>, TError,{applicationId: number;data: PostProjectChecklistRejectRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistReject>>, TError,{applicationId: number;data: PostProjectChecklistRejectRequest}, TContext> => {
    
const mutationKey = ['postProjectChecklistReject'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProjectChecklistReject>>, {applicationId: number;data: PostProjectChecklistRejectRequest}> = (props) => {
          const {applicationId,data} = props ?? {};

          return  postProjectChecklistReject(applicationId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProjectChecklistRejectMutationResult = NonNullable<Awaited<ReturnType<typeof postProjectChecklistReject>>>
    export type PostProjectChecklistRejectMutationBody = PostProjectChecklistRejectRequest
    export type PostProjectChecklistRejectMutationError = unknown

    /**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ïã†Ï≤≠ Í±∞Ï†à
 */
export const usePostProjectChecklistReject = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistReject>>, TError,{applicationId: number;data: PostProjectChecklistRejectRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postProjectChecklistReject>>,
        TError,
        {applicationId: number;data: PostProjectChecklistRejectRequest},
        TContext
      > => {

      const mutationOptions = getPostProjectChecklistRejectMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌäπÏ†ï Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ïã†Ï≤≠ÏùÑ ÏäπÏù∏Ìï©ÎãàÎã§.
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ïã†Ï≤≠ ÏäπÏù∏
 */
export const postProjectChecklistAccept = (
    applicationId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<PostProjectChecklistAcceptResponse>(
      {url: `/api/projects/accept/${applicationId}`, method: 'POST', signal
    },
      );
    }
  


export const getPostProjectChecklistAcceptMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistAccept>>, TError,{applicationId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistAccept>>, TError,{applicationId: number}, TContext> => {
    
const mutationKey = ['postProjectChecklistAccept'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProjectChecklistAccept>>, {applicationId: number}> = (props) => {
          const {applicationId} = props ?? {};

          return  postProjectChecklistAccept(applicationId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProjectChecklistAcceptMutationResult = NonNullable<Awaited<ReturnType<typeof postProjectChecklistAccept>>>
    
    export type PostProjectChecklistAcceptMutationError = unknown

    /**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ïã†Ï≤≠ ÏäπÏù∏
 */
export const usePostProjectChecklistAccept = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectChecklistAccept>>, TError,{applicationId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postProjectChecklistAccept>>,
        TError,
        {applicationId: number},
        TContext
      > => {

      const mutationOptions = getPostProjectChecklistAcceptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getProjectChecklistRejectLinks = (
    applicationId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseListLinkResponse>(
      {url: `/api/projects/reject/${applicationId}/links`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectChecklistRejectLinksQueryKey = (applicationId: number,) => {
    return [`/api/projects/reject/${applicationId}/links`] as const;
    }

    
export const getGetProjectChecklistRejectLinksInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistRejectLinksQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>> = ({ signal }) => getProjectChecklistRejectLinks(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistRejectLinksInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>>
export type GetProjectChecklistRejectLinksInfiniteQueryError = unknown


export function useGetProjectChecklistRejectLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistRejectLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistRejectLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectChecklistRejectLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistRejectLinksInfiniteQueryOptions(applicationId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectChecklistRejectLinksQueryOptions = <TData = Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistRejectLinksQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>> = ({ signal }) => getProjectChecklistRejectLinks(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistRejectLinksQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>>
export type GetProjectChecklistRejectLinksQueryError = unknown


export function useGetProjectChecklistRejectLinks<TData = Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistRejectLinks<TData = Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistRejectLinks<TData = Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectChecklistRejectLinks<TData = Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistRejectLinks>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistRejectLinksQueryOptions(applicationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getProjectChecklistApplication = (
    applicationId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseGetProjectChecklistApplicationResponse>(
      {url: `/api/projects/checklists/applications/${applicationId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectChecklistApplicationQueryKey = (applicationId: number,) => {
    return [`/api/projects/checklists/applications/${applicationId}`] as const;
    }

    
export const getGetProjectChecklistApplicationInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplication>>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistApplicationQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklistApplication>>> = ({ signal }) => getProjectChecklistApplication(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistApplicationInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklistApplication>>>
export type GetProjectChecklistApplicationInfiniteQueryError = unknown


export function useGetProjectChecklistApplicationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplication>>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplication>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplication>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplicationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplication>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplication>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplication>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplicationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplication>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectChecklistApplicationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplication>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistApplicationInfiniteQueryOptions(applicationId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectChecklistApplicationQueryOptions = <TData = Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistApplicationQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklistApplication>>> = ({ signal }) => getProjectChecklistApplication(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistApplicationQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklistApplication>>>
export type GetProjectChecklistApplicationQueryError = unknown


export function useGetProjectChecklistApplication<TData = Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplication>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplication>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplication<TData = Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplication>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplication>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplication<TData = Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectChecklistApplication<TData = Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplication>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistApplicationQueryOptions(applicationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getProjectChecklistApplicationLinks = (
    applicationId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseListLinkResponse>(
      {url: `/api/projects/checklists/applications/${applicationId}/links`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectChecklistApplicationLinksQueryKey = (applicationId: number,) => {
    return [`/api/projects/checklists/applications/${applicationId}/links`] as const;
    }

    
export const getGetProjectChecklistApplicationLinksInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistApplicationLinksQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>> = ({ signal }) => getProjectChecklistApplicationLinks(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistApplicationLinksInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>>
export type GetProjectChecklistApplicationLinksInfiniteQueryError = unknown


export function useGetProjectChecklistApplicationLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplicationLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplicationLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectChecklistApplicationLinksInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistApplicationLinksInfiniteQueryOptions(applicationId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectChecklistApplicationLinksQueryOptions = <TData = Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistApplicationLinksQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>> = ({ signal }) => getProjectChecklistApplicationLinks(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistApplicationLinksQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>>
export type GetProjectChecklistApplicationLinksQueryError = unknown


export function useGetProjectChecklistApplicationLinks<TData = Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplicationLinks<TData = Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplicationLinks<TData = Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectChecklistApplicationLinks<TData = Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationLinks>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistApplicationLinksQueryOptions(applicationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getProjectChecklistApplicationFiles = (
    applicationId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseListFileMetadataDto>(
      {url: `/api/projects/checklists/applications/${applicationId}/files`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectChecklistApplicationFilesQueryKey = (applicationId: number,) => {
    return [`/api/projects/checklists/applications/${applicationId}/files`] as const;
    }

    
export const getGetProjectChecklistApplicationFilesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistApplicationFilesQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>> = ({ signal }) => getProjectChecklistApplicationFiles(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistApplicationFilesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>>
export type GetProjectChecklistApplicationFilesInfiniteQueryError = unknown


export function useGetProjectChecklistApplicationFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplicationFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplicationFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectChecklistApplicationFilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistApplicationFilesInfiniteQueryOptions(applicationId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectChecklistApplicationFilesQueryOptions = <TData = Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectChecklistApplicationFilesQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>> = ({ signal }) => getProjectChecklistApplicationFiles(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectChecklistApplicationFilesQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>>
export type GetProjectChecklistApplicationFilesQueryError = unknown


export function useGetProjectChecklistApplicationFiles<TData = Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplicationFiles<TData = Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>,
          TError,
          Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectChecklistApplicationFiles<TData = Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectChecklistApplicationFiles<TData = Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectChecklistApplicationFiles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectChecklistApplicationFilesQueryOptions(applicationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÌäπÏ†ï ÌîÑÎ°úÏ†ùÌä∏ Ïã†Ï≤≠Ïùò Í≤∞Í≥ºÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ïã†Ï≤≠ Í≤∞Í≥º Ï°∞Ìöå
 */
export const getProjectApplicationResult = (
    applicationId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<GetApplicationResultResponse>(
      {url: `/api/projects/application/${applicationId}/result`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectApplicationResultQueryKey = (applicationId: number,) => {
    return [`/api/projects/application/${applicationId}/result`] as const;
    }

    
export const getGetProjectApplicationResultInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectApplicationResult>>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectApplicationResultQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectApplicationResult>>> = ({ signal }) => getProjectApplicationResult(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectApplicationResultInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectApplicationResult>>>
export type GetProjectApplicationResultInfiniteQueryError = unknown


export function useGetProjectApplicationResultInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectApplicationResult>>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectApplicationResult>>,
          TError,
          Awaited<ReturnType<typeof getProjectApplicationResult>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectApplicationResultInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectApplicationResult>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectApplicationResult>>,
          TError,
          Awaited<ReturnType<typeof getProjectApplicationResult>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectApplicationResultInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectApplicationResult>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ïã†Ï≤≠ Í≤∞Í≥º Ï°∞Ìöå
 */

export function useGetProjectApplicationResultInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectApplicationResult>>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectApplicationResultInfiniteQueryOptions(applicationId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectApplicationResultQueryOptions = <TData = Awaited<ReturnType<typeof getProjectApplicationResult>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectApplicationResultQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectApplicationResult>>> = ({ signal }) => getProjectApplicationResult(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectApplicationResultQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectApplicationResult>>>
export type GetProjectApplicationResultQueryError = unknown


export function useGetProjectApplicationResult<TData = Awaited<ReturnType<typeof getProjectApplicationResult>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectApplicationResult>>,
          TError,
          Awaited<ReturnType<typeof getProjectApplicationResult>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectApplicationResult<TData = Awaited<ReturnType<typeof getProjectApplicationResult>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectApplicationResult>>,
          TError,
          Awaited<ReturnType<typeof getProjectApplicationResult>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectApplicationResult<TData = Awaited<ReturnType<typeof getProjectApplicationResult>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ïã†Ï≤≠ Í≤∞Í≥º Ï°∞Ìöå
 */

export function useGetProjectApplicationResult<TData = Awaited<ReturnType<typeof getProjectApplicationResult>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectApplicationResult>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectApplicationResultQueryOptions(applicationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



