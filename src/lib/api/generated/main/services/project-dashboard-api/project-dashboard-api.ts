/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Devlens Admin API Î¨∏ÏÑú
 * Devlens Admin API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetCompanyProjectResponse,
  GetMyProjectParams,
  GetProjectListResponse
} from '../../models'
import { mainAxios } from '../../../../../axiosClient';



/**
 * ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ùÍ≥º ÌòÑÏû¨ ÌöåÏÇ¨Ïùò ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ùÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï°∞Ìöå
 */
export const getMyProject = (
    params?: GetMyProjectParams,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<GetProjectListResponse>(
      {url: `/api/projects`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMyProjectQueryKey = (params?: GetMyProjectParams,) => {
    return [`/api/projects`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMyProjectInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getMyProject>>>, TError = unknown>(params?: GetMyProjectParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyProjectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyProject>>> = ({ signal }) => getMyProject(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMyProjectInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getMyProject>>>
export type GetMyProjectInfiniteQueryError = unknown


export function useGetMyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMyProject>>>, TError = unknown>(
 params: undefined |  GetMyProjectParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyProject>>,
          TError,
          Awaited<ReturnType<typeof getMyProject>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMyProject>>>, TError = unknown>(
 params?: GetMyProjectParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyProject>>,
          TError,
          Awaited<ReturnType<typeof getMyProject>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMyProject>>>, TError = unknown>(
 params?: GetMyProjectParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetMyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMyProject>>>, TError = unknown>(
 params?: GetMyProjectParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMyProjectInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetMyProjectQueryOptions = <TData = Awaited<ReturnType<typeof getMyProject>>, TError = unknown>(params?: GetMyProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyProjectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyProject>>> = ({ signal }) => getMyProject(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMyProjectQueryResult = NonNullable<Awaited<ReturnType<typeof getMyProject>>>
export type GetMyProjectQueryError = unknown


export function useGetMyProject<TData = Awaited<ReturnType<typeof getMyProject>>, TError = unknown>(
 params: undefined |  GetMyProjectParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyProject>>,
          TError,
          Awaited<ReturnType<typeof getMyProject>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyProject<TData = Awaited<ReturnType<typeof getMyProject>>, TError = unknown>(
 params?: GetMyProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyProject>>,
          TError,
          Awaited<ReturnType<typeof getMyProject>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyProject<TData = Awaited<ReturnType<typeof getMyProject>>, TError = unknown>(
 params?: GetMyProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetMyProject<TData = Awaited<ReturnType<typeof getMyProject>>, TError = unknown>(
 params?: GetMyProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyProject>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMyProjectQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏßÄÏ†ïÎêú ÌöåÏÇ¨Ïùò ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ùÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
 * @summary ÌöåÏÇ¨ ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï°∞Ìöå
 */
export const getMyCompanyProject = (
    companyId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<GetCompanyProjectResponse>(
      {url: `/api/companies/${companyId}/projects`, method: 'GET', signal
    },
      );
    }
  

export const getGetMyCompanyProjectQueryKey = (companyId: number,) => {
    return [`/api/companies/${companyId}/projects`] as const;
    }

    
export const getGetMyCompanyProjectInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getMyCompanyProject>>>, TError = unknown>(companyId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyCompanyProjectQueryKey(companyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyCompanyProject>>> = ({ signal }) => getMyCompanyProject(companyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(companyId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMyCompanyProjectInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getMyCompanyProject>>>
export type GetMyCompanyProjectInfiniteQueryError = unknown


export function useGetMyCompanyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMyCompanyProject>>>, TError = unknown>(
 companyId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyCompanyProject>>,
          TError,
          Awaited<ReturnType<typeof getMyCompanyProject>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyCompanyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMyCompanyProject>>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyCompanyProject>>,
          TError,
          Awaited<ReturnType<typeof getMyCompanyProject>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyCompanyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMyCompanyProject>>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetMyCompanyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMyCompanyProject>>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMyCompanyProjectInfiniteQueryOptions(companyId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetMyCompanyProjectQueryOptions = <TData = Awaited<ReturnType<typeof getMyCompanyProject>>, TError = unknown>(companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyCompanyProjectQueryKey(companyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyCompanyProject>>> = ({ signal }) => getMyCompanyProject(companyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(companyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMyCompanyProjectQueryResult = NonNullable<Awaited<ReturnType<typeof getMyCompanyProject>>>
export type GetMyCompanyProjectQueryError = unknown


export function useGetMyCompanyProject<TData = Awaited<ReturnType<typeof getMyCompanyProject>>, TError = unknown>(
 companyId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyCompanyProject>>,
          TError,
          Awaited<ReturnType<typeof getMyCompanyProject>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyCompanyProject<TData = Awaited<ReturnType<typeof getMyCompanyProject>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyCompanyProject>>,
          TError,
          Awaited<ReturnType<typeof getMyCompanyProject>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyCompanyProject<TData = Awaited<ReturnType<typeof getMyCompanyProject>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetMyCompanyProject<TData = Awaited<ReturnType<typeof getMyCompanyProject>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyCompanyProject>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMyCompanyProjectQueryOptions(companyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



