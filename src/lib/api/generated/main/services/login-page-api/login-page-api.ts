/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  APIResponse,
  APIResponseLoginResponse,
  CheckMailPostRequest,
  LoginPostRequest,
  MemberPatchRequest
} from '../../models'
import { mainAxios } from '../../../../../axiosClient';



/**
 * Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ïù¥Î©îÏùº Ïù∏Ï¶ù Î©îÏùºÏùÑ Ï†ÑÏÜ°Ìï©ÎãàÎã§.
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù Î©îÏùº Ï†ÑÏÜ°
 */
export const sendMail = (
    
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/send-mail`, method: 'POST', signal
    },
      );
    }
  


export const getSendMailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendMail>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof sendMail>>, TError,void, TContext> => {
    
const mutationKey = ['sendMail'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendMail>>, void> = () => {
          

          return  sendMail()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendMailMutationResult = NonNullable<Awaited<ReturnType<typeof sendMail>>>
    
    export type SendMailMutationError = unknown

    /**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù Î©îÏùº Ï†ÑÏÜ°
 */
export const useSendMail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendMail>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof sendMail>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getSendMailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Ï†ÑÎã¨Îêú Access TokenÏùÑ ÏÇ¨Ïö©Ìï¥ Î°úÍ∑∏ÏïÑÏõÉÏùÑ Ï≤òÎ¶¨Ìï©ÎãàÎã§.
 * @summary ÌöåÏõê Î°úÍ∑∏ÏïÑÏõÉ
 */
export const logout = (
    
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/logout`, method: 'POST', signal
    },
      );
    }
  


export const getLogoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,void, TContext> => {
    
const mutationKey = ['logout'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logout>>, void> = () => {
          

          return  logout()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof logout>>>
    
    export type LogoutMutationError = unknown

    /**
 * @summary ÌöåÏõê Î°úÍ∑∏ÏïÑÏõÉ
 */
export const useLogout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof logout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌöåÏõê Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Î∞è JWT ÌÜ†ÌÅ∞ Î∞úÍ∏â. Î∞úÍ∏âÎêú Access TokenÍ≥º Refresh TokenÏùÄ Ïø†ÌÇ§Î°ú Î∞òÌôòÎê©ÎãàÎã§.
 * @summary ÌöåÏõê Î°úÍ∑∏Ïù∏
 */
export const login = (
    loginPostRequest: LoginPostRequest,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginPostRequest, signal
    },
      );
    }
  


export const getLoginMutationOptions = <TError = APIResponseLoginResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginPostRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginPostRequest}, TContext> => {
    
const mutationKey = ['login'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, {data: LoginPostRequest}> = (props) => {
          const {data} = props ?? {};

          return  login(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    export type LoginMutationBody = LoginPostRequest
    export type LoginMutationError = APIResponseLoginResponse

    /**
 * @summary ÌöåÏõê Î°úÍ∑∏Ïù∏
 */
export const useLogin = <TError = APIResponseLoginResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginPostRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof login>>,
        TError,
        {data: LoginPostRequest},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†•Ìïú Ïù∏Ï¶ù ÌÇ§Î•º Í≤ÄÏ¶ùÌïòÏó¨ Ïù∏Ï¶ù ÏÑ±Í≥µ Ïó¨Î∂ÄÎ•º Î∞òÌôòÌï©ÎãàÎã§.
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù ÌôïÏù∏
 */
export const checkMail = (
    checkMailPostRequest: CheckMailPostRequest,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/check-mail`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: checkMailPostRequest, signal
    },
      );
    }
  


export const getCheckMailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkMail>>, TError,{data: CheckMailPostRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof checkMail>>, TError,{data: CheckMailPostRequest}, TContext> => {
    
const mutationKey = ['checkMail'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof checkMail>>, {data: CheckMailPostRequest}> = (props) => {
          const {data} = props ?? {};

          return  checkMail(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CheckMailMutationResult = NonNullable<Awaited<ReturnType<typeof checkMail>>>
    export type CheckMailMutationBody = CheckMailPostRequest
    export type CheckMailMutationError = unknown

    /**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù ÌôïÏù∏
 */
export const useCheckMail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkMail>>, TError,{data: CheckMailPostRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof checkMail>>,
        TError,
        {data: CheckMailPostRequest},
        TContext
      > => {

      const mutationOptions = getCheckMailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌöåÏõê ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ï¥àÍ∏∞ÌôîÌïòÏó¨ ÏûÑÏãú ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î∞òÌôòÌï©ÎãàÎã§.
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï
 */
export const resetPwd = (
    memberPatchRequest: MemberPatchRequest,
 ) => {
      
      
      return mainAxios<APIResponse>(
      {url: `/api/members/reset-password`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: memberPatchRequest
    },
      );
    }
  


export const getResetPwdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetPwd>>, TError,{data: MemberPatchRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof resetPwd>>, TError,{data: MemberPatchRequest}, TContext> => {
    
const mutationKey = ['resetPwd'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetPwd>>, {data: MemberPatchRequest}> = (props) => {
          const {data} = props ?? {};

          return  resetPwd(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetPwdMutationResult = NonNullable<Awaited<ReturnType<typeof resetPwd>>>
    export type ResetPwdMutationBody = MemberPatchRequest
    export type ResetPwdMutationError = unknown

    /**
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï
 */
export const useResetPwd = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetPwd>>, TError,{data: MemberPatchRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof resetPwd>>,
        TError,
        {data: MemberPatchRequest},
        TContext
      > => {

      const mutationOptions = getResetPwdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    