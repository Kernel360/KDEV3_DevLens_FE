/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  APIResponseGetMemberAuthorizationResponse,
  APIResponseGetProjectAuthorizationResponse,
  APIResponsePostProjectAuthorizationResponse,
  PostProjectAuthorizationRequest
} from '../../models'
import { mainAxios } from '../../../../../axiosClient';



export const getProjectAuthorization = (
    projectId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseGetProjectAuthorizationResponse>(
      {url: `/api/projects/${projectId}/authorizations`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectAuthorizationQueryKey = (projectId: number,) => {
    return [`/api/projects/${projectId}/authorizations`] as const;
    }

    
export const getGetProjectAuthorizationInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectAuthorization>>>, TError = unknown>(projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectAuthorizationQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectAuthorization>>> = ({ signal }) => getProjectAuthorization(projectId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectAuthorizationInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectAuthorization>>>
export type GetProjectAuthorizationInfiniteQueryError = unknown


export function useGetProjectAuthorizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectAuthorization>>>, TError = unknown>(
 projectId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectAuthorization>>,
          TError,
          Awaited<ReturnType<typeof getProjectAuthorization>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectAuthorizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectAuthorization>>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectAuthorization>>,
          TError,
          Awaited<ReturnType<typeof getProjectAuthorization>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectAuthorizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectAuthorization>>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectAuthorizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectAuthorization>>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectAuthorizationInfiniteQueryOptions(projectId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectAuthorizationQueryOptions = <TData = Awaited<ReturnType<typeof getProjectAuthorization>>, TError = unknown>(projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectAuthorizationQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectAuthorization>>> = ({ signal }) => getProjectAuthorization(projectId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectAuthorizationQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectAuthorization>>>
export type GetProjectAuthorizationQueryError = unknown


export function useGetProjectAuthorization<TData = Awaited<ReturnType<typeof getProjectAuthorization>>, TError = unknown>(
 projectId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectAuthorization>>,
          TError,
          Awaited<ReturnType<typeof getProjectAuthorization>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectAuthorization<TData = Awaited<ReturnType<typeof getProjectAuthorization>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectAuthorization>>,
          TError,
          Awaited<ReturnType<typeof getProjectAuthorization>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectAuthorization<TData = Awaited<ReturnType<typeof getProjectAuthorization>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectAuthorization<TData = Awaited<ReturnType<typeof getProjectAuthorization>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectAuthorization>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectAuthorizationQueryOptions(projectId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postProjectAuthorization = (
    projectId: number,
    postProjectAuthorizationRequest: PostProjectAuthorizationRequest,
 ) => {
      
      
      return mainAxios<APIResponsePostProjectAuthorizationResponse>(
      {url: `/api/projects/${projectId}/authorizations`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: postProjectAuthorizationRequest
    },
      );
    }
  


export const getPostProjectAuthorizationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectAuthorization>>, TError,{projectId: number;data: PostProjectAuthorizationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProjectAuthorization>>, TError,{projectId: number;data: PostProjectAuthorizationRequest}, TContext> => {
    
const mutationKey = ['postProjectAuthorization'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProjectAuthorization>>, {projectId: number;data: PostProjectAuthorizationRequest}> = (props) => {
          const {projectId,data} = props ?? {};

          return  postProjectAuthorization(projectId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProjectAuthorizationMutationResult = NonNullable<Awaited<ReturnType<typeof postProjectAuthorization>>>
    export type PostProjectAuthorizationMutationBody = PostProjectAuthorizationRequest
    export type PostProjectAuthorizationMutationError = unknown

    export const usePostProjectAuthorization = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjectAuthorization>>, TError,{projectId: number;data: PostProjectAuthorizationRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postProjectAuthorization>>,
        TError,
        {projectId: number;data: PostProjectAuthorizationRequest},
        TContext
      > => {

      const mutationOptions = getPostProjectAuthorizationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getMemberAuthorization = (
    projectId: number,
 signal?: AbortSignal
) => {
      
      
      return mainAxios<APIResponseGetMemberAuthorizationResponse>(
      {url: `/api/projects/${projectId}/authorizations/members`, method: 'GET', signal
    },
      );
    }
  

export const getGetMemberAuthorizationQueryKey = (projectId: number,) => {
    return [`/api/projects/${projectId}/authorizations/members`] as const;
    }

    
export const getGetMemberAuthorizationInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getMemberAuthorization>>>, TError = unknown>(projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMemberAuthorizationQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMemberAuthorization>>> = ({ signal }) => getMemberAuthorization(projectId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMemberAuthorizationInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getMemberAuthorization>>>
export type GetMemberAuthorizationInfiniteQueryError = unknown


export function useGetMemberAuthorizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMemberAuthorization>>>, TError = unknown>(
 projectId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemberAuthorization>>,
          TError,
          Awaited<ReturnType<typeof getMemberAuthorization>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMemberAuthorizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMemberAuthorization>>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemberAuthorization>>,
          TError,
          Awaited<ReturnType<typeof getMemberAuthorization>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMemberAuthorizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMemberAuthorization>>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetMemberAuthorizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMemberAuthorization>>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMemberAuthorizationInfiniteQueryOptions(projectId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetMemberAuthorizationQueryOptions = <TData = Awaited<ReturnType<typeof getMemberAuthorization>>, TError = unknown>(projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMemberAuthorizationQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMemberAuthorization>>> = ({ signal }) => getMemberAuthorization(projectId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMemberAuthorizationQueryResult = NonNullable<Awaited<ReturnType<typeof getMemberAuthorization>>>
export type GetMemberAuthorizationQueryError = unknown


export function useGetMemberAuthorization<TData = Awaited<ReturnType<typeof getMemberAuthorization>>, TError = unknown>(
 projectId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemberAuthorization>>,
          TError,
          Awaited<ReturnType<typeof getMemberAuthorization>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMemberAuthorization<TData = Awaited<ReturnType<typeof getMemberAuthorization>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemberAuthorization>>,
          TError,
          Awaited<ReturnType<typeof getMemberAuthorization>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMemberAuthorization<TData = Awaited<ReturnType<typeof getMemberAuthorization>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetMemberAuthorization<TData = Awaited<ReturnType<typeof getMemberAuthorization>>, TError = unknown>(
 projectId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMemberAuthorization>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMemberAuthorizationQueryOptions(projectId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



