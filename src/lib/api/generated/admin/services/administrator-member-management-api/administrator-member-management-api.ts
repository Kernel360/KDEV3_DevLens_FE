/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  APIResponse,
  APIResponseLoginResponse,
  DeleteMember200,
  GetFilteredMembersParams,
  LoginPostRequest,
  MemberDtoRequest,
  MemberDtoResponse,
  MemberUpdatePatchRequest,
  MemberUpdatePatchResponse
} from '../../models'
import { adminAxios } from '../../../../../axiosClient';



export const login = (
    loginPostRequest: LoginPostRequest,
 signal?: AbortSignal
) => {
      
      
      return adminAxios<APIResponseLoginResponse>(
      {url: `/api/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginPostRequest, signal
    },
      );
    }
  


export const getLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginPostRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginPostRequest}, TContext> => {
    
const mutationKey = ['login'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, {data: LoginPostRequest}> = (props) => {
          const {data} = props ?? {};

          return  login(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    export type LoginMutationBody = LoginPostRequest
    export type LoginMutationError = unknown

    export const useLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginPostRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof login>>,
        TError,
        {data: LoginPostRequest},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌïÑÌÑ∞ Ï°∞Í±¥Ïóê Îî∞Îùº ÌöåÏõê Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÌöåÏõê Î™©Î°ù Ï°∞Ìöå
 */
export const getFilteredMembers = (
    params: GetFilteredMembersParams,
 signal?: AbortSignal
) => {
      
      
      return adminAxios<APIResponse>(
      {url: `/api/admin/members`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetFilteredMembersQueryKey = (params: GetFilteredMembersParams,) => {
    return [`/api/admin/members`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFilteredMembersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getFilteredMembers>>>, TError = unknown>(params: GetFilteredMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFilteredMembersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFilteredMembers>>> = ({ signal }) => getFilteredMembers(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFilteredMembersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getFilteredMembers>>>
export type GetFilteredMembersInfiniteQueryError = unknown


export function useGetFilteredMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getFilteredMembers>>>, TError = unknown>(
 params: GetFilteredMembersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFilteredMembers>>,
          TError,
          Awaited<ReturnType<typeof getFilteredMembers>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFilteredMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getFilteredMembers>>>, TError = unknown>(
 params: GetFilteredMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFilteredMembers>>,
          TError,
          Awaited<ReturnType<typeof getFilteredMembers>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFilteredMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getFilteredMembers>>>, TError = unknown>(
 params: GetFilteredMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏõê Î™©Î°ù Ï°∞Ìöå
 */

export function useGetFilteredMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getFilteredMembers>>>, TError = unknown>(
 params: GetFilteredMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFilteredMembersInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetFilteredMembersQueryOptions = <TData = Awaited<ReturnType<typeof getFilteredMembers>>, TError = unknown>(params: GetFilteredMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFilteredMembersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFilteredMembers>>> = ({ signal }) => getFilteredMembers(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFilteredMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getFilteredMembers>>>
export type GetFilteredMembersQueryError = unknown


export function useGetFilteredMembers<TData = Awaited<ReturnType<typeof getFilteredMembers>>, TError = unknown>(
 params: GetFilteredMembersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFilteredMembers>>,
          TError,
          Awaited<ReturnType<typeof getFilteredMembers>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFilteredMembers<TData = Awaited<ReturnType<typeof getFilteredMembers>>, TError = unknown>(
 params: GetFilteredMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFilteredMembers>>,
          TError,
          Awaited<ReturnType<typeof getFilteredMembers>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFilteredMembers<TData = Awaited<ReturnType<typeof getFilteredMembers>>, TError = unknown>(
 params: GetFilteredMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏõê Î™©Î°ù Ï°∞Ìöå
 */

export function useGetFilteredMembers<TData = Awaited<ReturnType<typeof getFilteredMembers>>, TError = unknown>(
 params: GetFilteredMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilteredMembers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFilteredMembersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Îã®Ïùº ÌöåÏõê Í≥ÑÏ†ïÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary ÌöåÏõê ÏÉùÏÑ±
 */
export const createMember = (
    memberDtoRequest: MemberDtoRequest,
 signal?: AbortSignal
) => {
      
      
      return adminAxios<MemberDtoResponse>(
      {url: `/api/admin/members`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: memberDtoRequest, signal
    },
      );
    }
  


export const getCreateMemberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMember>>, TError,{data: MemberDtoRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createMember>>, TError,{data: MemberDtoRequest}, TContext> => {
    
const mutationKey = ['createMember'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMember>>, {data: MemberDtoRequest}> = (props) => {
          const {data} = props ?? {};

          return  createMember(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMemberMutationResult = NonNullable<Awaited<ReturnType<typeof createMember>>>
    export type CreateMemberMutationBody = MemberDtoRequest
    export type CreateMemberMutationError = unknown

    /**
 * @summary ÌöåÏõê ÏÉùÏÑ±
 */
export const useCreateMember = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMember>>, TError,{data: MemberDtoRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createMember>>,
        TError,
        {data: MemberDtoRequest},
        TContext
      > => {

      const mutationOptions = getCreateMemberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ïó¨Îü¨ ÌöåÏõê Í≥ÑÏ†ïÏùÑ Ìïú Î≤àÏóê ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary Îã§Ï§ë ÌöåÏõê ÏÉùÏÑ±
 */
export const createMembers = (
    memberDtoRequest: MemberDtoRequest[],
 signal?: AbortSignal
) => {
      
      
      return adminAxios<string>(
      {url: `/api/admin/members/batch`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: memberDtoRequest, signal
    },
      );
    }
  


export const getCreateMembersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMembers>>, TError,{data: MemberDtoRequest[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createMembers>>, TError,{data: MemberDtoRequest[]}, TContext> => {
    
const mutationKey = ['createMembers'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMembers>>, {data: MemberDtoRequest[]}> = (props) => {
          const {data} = props ?? {};

          return  createMembers(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMembersMutationResult = NonNullable<Awaited<ReturnType<typeof createMembers>>>
    export type CreateMembersMutationBody = MemberDtoRequest[]
    export type CreateMembersMutationError = unknown

    /**
 * @summary Îã§Ï§ë ÌöåÏõê ÏÉùÏÑ±
 */
export const useCreateMembers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMembers>>, TError,{data: MemberDtoRequest[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createMembers>>,
        TError,
        {data: MemberDtoRequest[]},
        TContext
      > => {

      const mutationOptions = getCreateMembersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌöåÏõê IDÎ°ú ÌöåÏõê ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÌöåÏõê ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const memberDetail = (
    memberId: number,
 signal?: AbortSignal
) => {
      
      
      return adminAxios<MemberDtoResponse>(
      {url: `/api/admin/members/${memberId}`, method: 'GET', signal
    },
      );
    }
  

export const getMemberDetailQueryKey = (memberId: number,) => {
    return [`/api/admin/members/${memberId}`] as const;
    }

    
export const getMemberDetailInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof memberDetail>>>, TError = unknown>(memberId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMemberDetailQueryKey(memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof memberDetail>>> = ({ signal }) => memberDetail(memberId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(memberId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MemberDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof memberDetail>>>
export type MemberDetailInfiniteQueryError = unknown


export function useMemberDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof memberDetail>>>, TError = unknown>(
 memberId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof memberDetail>>,
          TError,
          Awaited<ReturnType<typeof memberDetail>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMemberDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof memberDetail>>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof memberDetail>>,
          TError,
          Awaited<ReturnType<typeof memberDetail>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMemberDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof memberDetail>>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏõê ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useMemberDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof memberDetail>>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMemberDetailInfiniteQueryOptions(memberId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMemberDetailQueryOptions = <TData = Awaited<ReturnType<typeof memberDetail>>, TError = unknown>(memberId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMemberDetailQueryKey(memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof memberDetail>>> = ({ signal }) => memberDetail(memberId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(memberId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MemberDetailQueryResult = NonNullable<Awaited<ReturnType<typeof memberDetail>>>
export type MemberDetailQueryError = unknown


export function useMemberDetail<TData = Awaited<ReturnType<typeof memberDetail>>, TError = unknown>(
 memberId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof memberDetail>>,
          TError,
          Awaited<ReturnType<typeof memberDetail>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMemberDetail<TData = Awaited<ReturnType<typeof memberDetail>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof memberDetail>>,
          TError,
          Awaited<ReturnType<typeof memberDetail>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMemberDetail<TData = Awaited<ReturnType<typeof memberDetail>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏõê ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useMemberDetail<TData = Awaited<ReturnType<typeof memberDetail>>, TError = unknown>(
 memberId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMemberDetailQueryOptions(memberId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÌöåÏõê Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary ÌöåÏõê ÏÇ≠Ï†ú
 */
export const deleteMember = (
    memberId: number,
 ) => {
      
      
      return adminAxios<DeleteMember200>(
      {url: `/api/admin/members/${memberId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteMemberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMember>>, TError,{memberId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteMember>>, TError,{memberId: number}, TContext> => {
    
const mutationKey = ['deleteMember'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMember>>, {memberId: number}> = (props) => {
          const {memberId} = props ?? {};

          return  deleteMember(memberId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMemberMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMember>>>
    
    export type DeleteMemberMutationError = unknown

    /**
 * @summary ÌöåÏõê ÏÇ≠Ï†ú
 */
export const useDeleteMember = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMember>>, TError,{memberId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMember>>,
        TError,
        {memberId: number},
        TContext
      > => {

      const mutationOptions = getDeleteMemberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌöåÏõê Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary ÌöåÏõê ÏàòÏ†ï
 */
export const updateMember = (
    memberId: number,
    memberUpdatePatchRequest: MemberUpdatePatchRequest,
 ) => {
      
      
      return adminAxios<MemberDtoResponse>(
      {url: `/api/admin/members/${memberId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: memberUpdatePatchRequest
    },
      );
    }
  


export const getUpdateMemberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMember>>, TError,{memberId: number;data: MemberUpdatePatchRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateMember>>, TError,{memberId: number;data: MemberUpdatePatchRequest}, TContext> => {
    
const mutationKey = ['updateMember'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMember>>, {memberId: number;data: MemberUpdatePatchRequest}> = (props) => {
          const {memberId,data} = props ?? {};

          return  updateMember(memberId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMemberMutationResult = NonNullable<Awaited<ReturnType<typeof updateMember>>>
    export type UpdateMemberMutationBody = MemberUpdatePatchRequest
    export type UpdateMemberMutationError = unknown

    /**
 * @summary ÌöåÏõê ÏàòÏ†ï
 */
export const useUpdateMember = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMember>>, TError,{memberId: number;data: MemberUpdatePatchRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateMember>>,
        TError,
        {memberId: number;data: MemberUpdatePatchRequest},
        TContext
      > => {

      const mutationOptions = getUpdateMemberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌöåÏõê ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî
 */
export const resetPwd = (
    memberId: number,
 ) => {
      
      
      return adminAxios<MemberUpdatePatchResponse>(
      {url: `/api/admin/members/${memberId}/reset-password`, method: 'PATCH'
    },
      );
    }
  


export const getResetPwdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetPwd>>, TError,{memberId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof resetPwd>>, TError,{memberId: number}, TContext> => {
    
const mutationKey = ['resetPwd'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetPwd>>, {memberId: number}> = (props) => {
          const {memberId} = props ?? {};

          return  resetPwd(memberId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetPwdMutationResult = NonNullable<Awaited<ReturnType<typeof resetPwd>>>
    
    export type ResetPwdMutationError = unknown

    /**
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî
 */
export const useResetPwd = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetPwd>>, TError,{memberId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof resetPwd>>,
        TError,
        {memberId: number},
        TContext
      > => {

      const mutationOptions = getResetPwdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    