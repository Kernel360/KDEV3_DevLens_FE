/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  APIResponseObject,
  GetCompanyDetailResponse,
  GetCompanyMemberResponse,
  PaginatedResponse,
  PostCompanyRequest,
  PostCompanyResponse,
  PutCompanyRequest,
  PutCompanyResponse,
  ReadCompanyListParams,
  ReadCompanyProjectParams,
  SearchCompaniesByNameParams
} from '../../models'
import { adminAxios } from '../../../../../axiosClient';



/**
 * ÌöåÏÇ¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
 * @summary ÌöåÏÇ¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
 */
export const readCompany = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return adminAxios<GetCompanyDetailResponse>(
      {url: `/api/admin/companies/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getReadCompanyQueryKey = (id: number,) => {
    return [`/api/admin/companies/${id}`] as const;
    }

    
export const getReadCompanyInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof readCompany>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadCompanyQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readCompany>>> = ({ signal }) => readCompany(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadCompanyInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof readCompany>>>
export type ReadCompanyInfiniteQueryError = unknown


export function useReadCompanyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompany>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompany>>,
          TError,
          Awaited<ReturnType<typeof readCompany>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompanyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompany>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompany>>,
          TError,
          Awaited<ReturnType<typeof readCompany>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompanyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompany>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
 */

export function useReadCompanyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompany>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadCompanyInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getReadCompanyQueryOptions = <TData = Awaited<ReturnType<typeof readCompany>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadCompanyQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readCompany>>> = ({ signal }) => readCompany(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadCompanyQueryResult = NonNullable<Awaited<ReturnType<typeof readCompany>>>
export type ReadCompanyQueryError = unknown


export function useReadCompany<TData = Awaited<ReturnType<typeof readCompany>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompany>>,
          TError,
          Awaited<ReturnType<typeof readCompany>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompany<TData = Awaited<ReturnType<typeof readCompany>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompany>>,
          TError,
          Awaited<ReturnType<typeof readCompany>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompany<TData = Awaited<ReturnType<typeof readCompany>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
 */

export function useReadCompany<TData = Awaited<ReturnType<typeof readCompany>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompany>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadCompanyQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÌöåÏÇ¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÏàòÏ†ï
 * @summary ÌöåÏÇ¨ ÏàòÏ†ï
 */
export const updateCompany = (
    id: number,
    putCompanyRequest: PutCompanyRequest,
 ) => {
      
      
      return adminAxios<PutCompanyResponse>(
      {url: `/api/admin/companies/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putCompanyRequest
    },
      );
    }
  


export const getUpdateCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCompany>>, TError,{id: number;data: PutCompanyRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateCompany>>, TError,{id: number;data: PutCompanyRequest}, TContext> => {
    
const mutationKey = ['updateCompany'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCompany>>, {id: number;data: PutCompanyRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCompany(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCompanyMutationResult = NonNullable<Awaited<ReturnType<typeof updateCompany>>>
    export type UpdateCompanyMutationBody = PutCompanyRequest
    export type UpdateCompanyMutationError = unknown

    /**
 * @summary ÌöåÏÇ¨ ÏàòÏ†ï
 */
export const useUpdateCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCompany>>, TError,{id: number;data: PutCompanyRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateCompany>>,
        TError,
        {id: number;data: PutCompanyRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCompanyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌöåÏÇ¨ ÏÉÅÌÉú Î≥ÄÍ≤Ω
 * @summary ÌöåÏÇ¨ ÏÉÅÌÉú Î≥ÄÍ≤Ω
 */
export const changeCompanyIsActive = (
    id: number,
 ) => {
      
      
      return adminAxios<APIResponseObject>(
      {url: `/api/admin/companies/${id}`, method: 'PATCH'
    },
      );
    }
  


export const getChangeCompanyIsActiveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeCompanyIsActive>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changeCompanyIsActive>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['changeCompanyIsActive'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeCompanyIsActive>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  changeCompanyIsActive(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeCompanyIsActiveMutationResult = NonNullable<Awaited<ReturnType<typeof changeCompanyIsActive>>>
    
    export type ChangeCompanyIsActiveMutationError = unknown

    /**
 * @summary ÌöåÏÇ¨ ÏÉÅÌÉú Î≥ÄÍ≤Ω
 */
export const useChangeCompanyIsActive = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeCompanyIsActive>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changeCompanyIsActive>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getChangeCompanyIsActiveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌöåÏÇ¨ Î™©Î°ù ÌéòÏù¥ÏßÄ Ï°∞Ìöå
 * @summary ÌöåÏÇ¨ Î™©Î°ù Ï°∞Ìöå
 */
export const readCompanyList = (
    params: ReadCompanyListParams,
 signal?: AbortSignal
) => {
      
      
      return adminAxios<PaginatedResponse>(
      {url: `/api/admin/companies`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getReadCompanyListQueryKey = (params: ReadCompanyListParams,) => {
    return [`/api/admin/companies`, ...(params ? [params]: [])] as const;
    }

    
export const getReadCompanyListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof readCompanyList>>, ReadCompanyListParams['page']>, TError = unknown>(params: ReadCompanyListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData, Awaited<ReturnType<typeof readCompanyList>>, QueryKey, ReadCompanyListParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadCompanyListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readCompanyList>>, QueryKey, ReadCompanyListParams['page']> = ({ signal, pageParam }) => readCompanyList({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData, Awaited<ReturnType<typeof readCompanyList>>, QueryKey, ReadCompanyListParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadCompanyListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof readCompanyList>>>
export type ReadCompanyListInfiniteQueryError = unknown


export function useReadCompanyListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompanyList>>, ReadCompanyListParams['page']>, TError = unknown>(
 params: ReadCompanyListParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData, Awaited<ReturnType<typeof readCompanyList>>, QueryKey, ReadCompanyListParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompanyList>>,
          TError,
          Awaited<ReturnType<typeof readCompanyList>>, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompanyListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompanyList>>, ReadCompanyListParams['page']>, TError = unknown>(
 params: ReadCompanyListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData, Awaited<ReturnType<typeof readCompanyList>>, QueryKey, ReadCompanyListParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompanyList>>,
          TError,
          Awaited<ReturnType<typeof readCompanyList>>, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompanyListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompanyList>>, ReadCompanyListParams['page']>, TError = unknown>(
 params: ReadCompanyListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData, Awaited<ReturnType<typeof readCompanyList>>, QueryKey, ReadCompanyListParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ Î™©Î°ù Ï°∞Ìöå
 */

export function useReadCompanyListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompanyList>>, ReadCompanyListParams['page']>, TError = unknown>(
 params: ReadCompanyListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData, Awaited<ReturnType<typeof readCompanyList>>, QueryKey, ReadCompanyListParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadCompanyListInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getReadCompanyListQueryOptions = <TData = Awaited<ReturnType<typeof readCompanyList>>, TError = unknown>(params: ReadCompanyListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadCompanyListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readCompanyList>>> = ({ signal }) => readCompanyList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadCompanyListQueryResult = NonNullable<Awaited<ReturnType<typeof readCompanyList>>>
export type ReadCompanyListQueryError = unknown


export function useReadCompanyList<TData = Awaited<ReturnType<typeof readCompanyList>>, TError = unknown>(
 params: ReadCompanyListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompanyList>>,
          TError,
          Awaited<ReturnType<typeof readCompanyList>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompanyList<TData = Awaited<ReturnType<typeof readCompanyList>>, TError = unknown>(
 params: ReadCompanyListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompanyList>>,
          TError,
          Awaited<ReturnType<typeof readCompanyList>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompanyList<TData = Awaited<ReturnType<typeof readCompanyList>>, TError = unknown>(
 params: ReadCompanyListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ Î™©Î°ù Ï°∞Ìöå
 */

export function useReadCompanyList<TData = Awaited<ReturnType<typeof readCompanyList>>, TError = unknown>(
 params: ReadCompanyListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompanyList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadCompanyListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÌöåÏÇ¨ ÏÉùÏÑ±
 * @summary ÌöåÏÇ¨ ÏÉùÏÑ±
 */
export const createCompany = (
    postCompanyRequest: PostCompanyRequest,
 signal?: AbortSignal
) => {
      
      
      return adminAxios<PostCompanyResponse>(
      {url: `/api/admin/companies`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCompanyRequest, signal
    },
      );
    }
  


export const getCreateCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCompany>>, TError,{data: PostCompanyRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createCompany>>, TError,{data: PostCompanyRequest}, TContext> => {
    
const mutationKey = ['createCompany'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCompany>>, {data: PostCompanyRequest}> = (props) => {
          const {data} = props ?? {};

          return  createCompany(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCompanyMutationResult = NonNullable<Awaited<ReturnType<typeof createCompany>>>
    export type CreateCompanyMutationBody = PostCompanyRequest
    export type CreateCompanyMutationError = unknown

    /**
 * @summary ÌöåÏÇ¨ ÏÉùÏÑ±
 */
export const useCreateCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCompany>>, TError,{data: PostCompanyRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createCompany>>,
        TError,
        {data: PostCompanyRequest},
        TContext
      > => {

      const mutationOptions = getCreateCompanyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌöåÏÇ¨ Ï∞∏Ïó¨ ÌîÑÎ°úÏ†ùÌä∏
 * @summary ÌöåÏÇ¨ Ï∞∏Ïó¨ ÌîÑÎ°úÏ†ùÌä∏
 */
export const readCompanyProject = (
    id: number,
    params: ReadCompanyProjectParams,
 signal?: AbortSignal
) => {
      
      
      return adminAxios<PaginatedResponse>(
      {url: `/api/admin/companies/${id}/projects`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getReadCompanyProjectQueryKey = (id: number,
    params: ReadCompanyProjectParams,) => {
    return [`/api/admin/companies/${id}/projects`, ...(params ? [params]: [])] as const;
    }

    
export const getReadCompanyProjectInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof readCompanyProject>>, ReadCompanyProjectParams['page']>, TError = unknown>(id: number,
    params: ReadCompanyProjectParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData, Awaited<ReturnType<typeof readCompanyProject>>, QueryKey, ReadCompanyProjectParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadCompanyProjectQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readCompanyProject>>, QueryKey, ReadCompanyProjectParams['page']> = ({ signal, pageParam }) => readCompanyProject(id,{...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData, Awaited<ReturnType<typeof readCompanyProject>>, QueryKey, ReadCompanyProjectParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadCompanyProjectInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof readCompanyProject>>>
export type ReadCompanyProjectInfiniteQueryError = unknown


export function useReadCompanyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompanyProject>>, ReadCompanyProjectParams['page']>, TError = unknown>(
 id: number,
    params: ReadCompanyProjectParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData, Awaited<ReturnType<typeof readCompanyProject>>, QueryKey, ReadCompanyProjectParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompanyProject>>,
          TError,
          Awaited<ReturnType<typeof readCompanyProject>>, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompanyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompanyProject>>, ReadCompanyProjectParams['page']>, TError = unknown>(
 id: number,
    params: ReadCompanyProjectParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData, Awaited<ReturnType<typeof readCompanyProject>>, QueryKey, ReadCompanyProjectParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompanyProject>>,
          TError,
          Awaited<ReturnType<typeof readCompanyProject>>, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompanyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompanyProject>>, ReadCompanyProjectParams['page']>, TError = unknown>(
 id: number,
    params: ReadCompanyProjectParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData, Awaited<ReturnType<typeof readCompanyProject>>, QueryKey, ReadCompanyProjectParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ Ï∞∏Ïó¨ ÌîÑÎ°úÏ†ùÌä∏
 */

export function useReadCompanyProjectInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readCompanyProject>>, ReadCompanyProjectParams['page']>, TError = unknown>(
 id: number,
    params: ReadCompanyProjectParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData, Awaited<ReturnType<typeof readCompanyProject>>, QueryKey, ReadCompanyProjectParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadCompanyProjectInfiniteQueryOptions(id,params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getReadCompanyProjectQueryOptions = <TData = Awaited<ReturnType<typeof readCompanyProject>>, TError = unknown>(id: number,
    params: ReadCompanyProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadCompanyProjectQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readCompanyProject>>> = ({ signal }) => readCompanyProject(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadCompanyProjectQueryResult = NonNullable<Awaited<ReturnType<typeof readCompanyProject>>>
export type ReadCompanyProjectQueryError = unknown


export function useReadCompanyProject<TData = Awaited<ReturnType<typeof readCompanyProject>>, TError = unknown>(
 id: number,
    params: ReadCompanyProjectParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompanyProject>>,
          TError,
          Awaited<ReturnType<typeof readCompanyProject>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompanyProject<TData = Awaited<ReturnType<typeof readCompanyProject>>, TError = unknown>(
 id: number,
    params: ReadCompanyProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readCompanyProject>>,
          TError,
          Awaited<ReturnType<typeof readCompanyProject>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadCompanyProject<TData = Awaited<ReturnType<typeof readCompanyProject>>, TError = unknown>(
 id: number,
    params: ReadCompanyProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ Ï∞∏Ïó¨ ÌîÑÎ°úÏ†ùÌä∏
 */

export function useReadCompanyProject<TData = Awaited<ReturnType<typeof readCompanyProject>>, TError = unknown>(
 id: number,
    params: ReadCompanyProjectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readCompanyProject>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadCompanyProjectQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÌöåÏÇ¨Ïóê ÏÜåÏÜçÎêú Î™®Îì† ÌöåÏõêÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
 * @summary ÌöåÏÇ¨ ÏÜåÏÜç ÌöåÏõê Ï†ÑÏ≤¥ Ï°∞Ìöå
 */
export const getCompanyMembers = (
    companyId: number,
 signal?: AbortSignal
) => {
      
      
      return adminAxios<GetCompanyMemberResponse>(
      {url: `/api/admin/companies/${companyId}/members`, method: 'GET', signal
    },
      );
    }
  

export const getGetCompanyMembersQueryKey = (companyId: number,) => {
    return [`/api/admin/companies/${companyId}/members`] as const;
    }

    
export const getGetCompanyMembersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getCompanyMembers>>>, TError = unknown>(companyId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompanyMembersQueryKey(companyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyMembers>>> = ({ signal }) => getCompanyMembers(companyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(companyId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCompanyMembersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyMembers>>>
export type GetCompanyMembersInfiniteQueryError = unknown


export function useGetCompanyMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCompanyMembers>>>, TError = unknown>(
 companyId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompanyMembers>>,
          TError,
          Awaited<ReturnType<typeof getCompanyMembers>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompanyMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCompanyMembers>>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompanyMembers>>,
          TError,
          Awaited<ReturnType<typeof getCompanyMembers>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompanyMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCompanyMembers>>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ ÏÜåÏÜç ÌöåÏõê Ï†ÑÏ≤¥ Ï°∞Ìöå
 */

export function useGetCompanyMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCompanyMembers>>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCompanyMembersInfiniteQueryOptions(companyId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetCompanyMembersQueryOptions = <TData = Awaited<ReturnType<typeof getCompanyMembers>>, TError = unknown>(companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompanyMembersQueryKey(companyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyMembers>>> = ({ signal }) => getCompanyMembers(companyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(companyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCompanyMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyMembers>>>
export type GetCompanyMembersQueryError = unknown


export function useGetCompanyMembers<TData = Awaited<ReturnType<typeof getCompanyMembers>>, TError = unknown>(
 companyId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompanyMembers>>,
          TError,
          Awaited<ReturnType<typeof getCompanyMembers>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompanyMembers<TData = Awaited<ReturnType<typeof getCompanyMembers>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompanyMembers>>,
          TError,
          Awaited<ReturnType<typeof getCompanyMembers>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompanyMembers<TData = Awaited<ReturnType<typeof getCompanyMembers>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ ÏÜåÏÜç ÌöåÏõê Ï†ÑÏ≤¥ Ï°∞Ìöå
 */

export function useGetCompanyMembers<TData = Awaited<ReturnType<typeof getCompanyMembers>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCompanyMembersQueryOptions(companyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÌöåÏÇ¨ Ïù¥Î¶ÑÏúºÎ°ú ÌöåÏÇ¨ Í≤ÄÏÉâ
 * @summary ÌöåÏÇ¨ Í≤ÄÏÉâ
 */
export const searchCompaniesByName = (
    params: SearchCompaniesByNameParams,
 signal?: AbortSignal
) => {
      
      
      return adminAxios<PaginatedResponse>(
      {url: `/api/admin/companies/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSearchCompaniesByNameQueryKey = (params: SearchCompaniesByNameParams,) => {
    return [`/api/admin/companies/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchCompaniesByNameInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof searchCompaniesByName>>, SearchCompaniesByNameParams['page']>, TError = unknown>(params: SearchCompaniesByNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData, Awaited<ReturnType<typeof searchCompaniesByName>>, QueryKey, SearchCompaniesByNameParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchCompaniesByNameQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCompaniesByName>>, QueryKey, SearchCompaniesByNameParams['page']> = ({ signal, pageParam }) => searchCompaniesByName({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData, Awaited<ReturnType<typeof searchCompaniesByName>>, QueryKey, SearchCompaniesByNameParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchCompaniesByNameInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchCompaniesByName>>>
export type SearchCompaniesByNameInfiniteQueryError = unknown


export function useSearchCompaniesByNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchCompaniesByName>>, SearchCompaniesByNameParams['page']>, TError = unknown>(
 params: SearchCompaniesByNameParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData, Awaited<ReturnType<typeof searchCompaniesByName>>, QueryKey, SearchCompaniesByNameParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCompaniesByName>>,
          TError,
          Awaited<ReturnType<typeof searchCompaniesByName>>, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCompaniesByNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchCompaniesByName>>, SearchCompaniesByNameParams['page']>, TError = unknown>(
 params: SearchCompaniesByNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData, Awaited<ReturnType<typeof searchCompaniesByName>>, QueryKey, SearchCompaniesByNameParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCompaniesByName>>,
          TError,
          Awaited<ReturnType<typeof searchCompaniesByName>>, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCompaniesByNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchCompaniesByName>>, SearchCompaniesByNameParams['page']>, TError = unknown>(
 params: SearchCompaniesByNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData, Awaited<ReturnType<typeof searchCompaniesByName>>, QueryKey, SearchCompaniesByNameParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ Í≤ÄÏÉâ
 */

export function useSearchCompaniesByNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchCompaniesByName>>, SearchCompaniesByNameParams['page']>, TError = unknown>(
 params: SearchCompaniesByNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData, Awaited<ReturnType<typeof searchCompaniesByName>>, QueryKey, SearchCompaniesByNameParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchCompaniesByNameInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchCompaniesByNameQueryOptions = <TData = Awaited<ReturnType<typeof searchCompaniesByName>>, TError = unknown>(params: SearchCompaniesByNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchCompaniesByNameQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCompaniesByName>>> = ({ signal }) => searchCompaniesByName(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchCompaniesByNameQueryResult = NonNullable<Awaited<ReturnType<typeof searchCompaniesByName>>>
export type SearchCompaniesByNameQueryError = unknown


export function useSearchCompaniesByName<TData = Awaited<ReturnType<typeof searchCompaniesByName>>, TError = unknown>(
 params: SearchCompaniesByNameParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCompaniesByName>>,
          TError,
          Awaited<ReturnType<typeof searchCompaniesByName>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCompaniesByName<TData = Awaited<ReturnType<typeof searchCompaniesByName>>, TError = unknown>(
 params: SearchCompaniesByNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCompaniesByName>>,
          TError,
          Awaited<ReturnType<typeof searchCompaniesByName>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCompaniesByName<TData = Awaited<ReturnType<typeof searchCompaniesByName>>, TError = unknown>(
 params: SearchCompaniesByNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌöåÏÇ¨ Í≤ÄÏÉâ
 */

export function useSearchCompaniesByName<TData = Awaited<ReturnType<typeof searchCompaniesByName>>, TError = unknown>(
 params: SearchCompaniesByNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCompaniesByName>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchCompaniesByNameQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ï†ÑÏ≤¥ ÌöåÏÇ¨ Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 * @summary Ï†ÑÏ≤¥ ÌöåÏÇ¨ Ï°∞Ìöå
 */
export const readAllCompany = (
    
 signal?: AbortSignal
) => {
      
      
      return adminAxios<string>(
      {url: `/api/admin/companies/all`, method: 'GET', signal
    },
      );
    }
  

export const getReadAllCompanyQueryKey = () => {
    return [`/api/admin/companies/all`] as const;
    }

    
export const getReadAllCompanyInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof readAllCompany>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllCompanyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllCompany>>> = ({ signal }) => readAllCompany(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllCompanyInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof readAllCompany>>>
export type ReadAllCompanyInfiniteQueryError = unknown


export function useReadAllCompanyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readAllCompany>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllCompany>>,
          TError,
          Awaited<ReturnType<typeof readAllCompany>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllCompanyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readAllCompany>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllCompany>>,
          TError,
          Awaited<ReturnType<typeof readAllCompany>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllCompanyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readAllCompany>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ï†ÑÏ≤¥ ÌöåÏÇ¨ Ï°∞Ìöå
 */

export function useReadAllCompanyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof readAllCompany>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllCompanyInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getReadAllCompanyQueryOptions = <TData = Awaited<ReturnType<typeof readAllCompany>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllCompanyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllCompany>>> = ({ signal }) => readAllCompany(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllCompanyQueryResult = NonNullable<Awaited<ReturnType<typeof readAllCompany>>>
export type ReadAllCompanyQueryError = unknown


export function useReadAllCompany<TData = Awaited<ReturnType<typeof readAllCompany>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllCompany>>,
          TError,
          Awaited<ReturnType<typeof readAllCompany>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllCompany<TData = Awaited<ReturnType<typeof readAllCompany>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllCompany>>,
          TError,
          Awaited<ReturnType<typeof readAllCompany>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllCompany<TData = Awaited<ReturnType<typeof readAllCompany>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ï†ÑÏ≤¥ ÌöåÏÇ¨ Ï°∞Ìöå
 */

export function useReadAllCompany<TData = Awaited<ReturnType<typeof readAllCompany>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllCompany>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllCompanyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



